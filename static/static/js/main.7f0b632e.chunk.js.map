{"version":3,"sources":["components/ImageUploader.js","components/ModelSelector.js","components/VectorDBActions.js","components/ResultDisplay.js","components/LlmAnalysis.js","components/OpenAIChat.js","components/ProductComparison.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","paper","padding","spacing","display","flexDirection","alignItems","height","minHeight","transition","dragActive","border","backgroundColor","dragInactive","uploadBox","justifyContent","width","cursor","uploadIcon","fontSize","color","marginBottom","supportText","marginTop","previewBox","position","imageContainer","breakpoints","down","overflow","deleteButton","top","right","ImageUploader","_ref","onImageUpload","classes","previewUrl","setPreviewUrl","useState","setDragActive","fileInputRef","useRef","handleDrag","e","preventDefault","stopPropagation","type","handleFiles","file","startsWith","URL","createObjectURL","alert","React","createElement","Paper","className","concat","onDragEnter","onDragLeave","onDragOver","onDrop","dataTransfer","files","ref","accept","onChange","target","style","Box","Typography","variant","gutterBottom","src","alt","maxWidth","maxHeight","objectFit","IconButton","aria-label","onClick","handleRemoveImage","current","value","DeleteIcon","onButtonClick","click","CloudUploadIcon","Button","component","startIcon","card","selectedCard","unavailableCard","opacity","cardContent","flexGrow","chipContainer","successChip","errorChip","modelType","processButton","textAlign","ModelSelector","onModelSelect","onProcess","isProcessing","modelsStatus","selectedModel","imageSelected","models","id","name","description","icon","VisibilityIcon","available","yolo","detr","CategoryIcon","vit","handleModelClick","modelId","find","m","sx","p","Grid","container","map","model","item","xs","sm","key","Card","CardContent","mb","Chip","label","size","CardActions","disabled","fullWidth","PlayArrowIcon","root","borderRadius","shape","button","marginRight","searchDialog","minWidth","formControl","searchResults","resultCard","resultImage","chip","margin","similarityChip","palette","primary","main","VectorDBActions","results","isSaving","setIsSaving","saveSuccess","setSaveSuccess","saveError","setSaveError","openSearchDialog","setOpenSearchDialog","searchType","setSearchType","searchClass","setSearchClass","setSearchResults","isSearching","setIsSearching","searchError","setSearchError","data","handleCloseSearchDialog","generateUUID","replace","c","r","Math","random","toString","async","response","fetch","method","headers","body","JSON","stringify","image","metadata","classifications","objects","detections","imageId","ok","Error","status","result","json","error","setTimeout","err","console","message","Fragment","CircularProgress","handleOpenSearchDialog","Alert","severity","Snackbar","open","autoHideDuration","onClose","Dialog","DialogTitle","DialogContent","FormControl","InputLabel","Select","labelId","event","MenuItem","TextField","placeholder","marginLeft","log","length","index","similarity","distance","image_data","CardMedia","class","toFixed","confidence","DialogActions","requestBody","n_results","trim","class_name","success","Array","isArray","dividerMargin","gap","flexWrap","ResultDisplay","bgcolor","renderPerformanceInfo","performance","Divider","ms","undefined","isNaN","num","Number","formatTime","inference_time","device","md","List","detection","ListItem","ListItemText","secondary","bbox","join","top_predictions","prediction","rank","probability","responseBox","whiteSpace","buttonProgress","LlmAnalysis","visionResults","userQuery","setUserQuery","isAnalyzing","setIsAnalyzing","analysisResult","setAnalysisResult","setError","mt","OpenAIChat","imageBase64","apiKey","setApiKey","prompt","setPrompt","setResponse","loading","setLoading","objectId","setObjectId","setClassName","nResults","setNResults","inputProps","min","max","multiline","rows","q","api_key","res","credentials","txt","text","parse","_unused","meta","latency_sec","retrievedText","retrieved","forEach","answer","onClear","fontFamily","progressLog","overflowY","logEntry","borderLeft","logEntryAgent","logEntrySystem","logEntryError","logTime","imagePreview","uploadInput","tabPanel","comparisonTable","borderCollapse","loadingContainer","highlight","fontWeight","ProductComparison","images","setImages","imagePreviews","setImagePreviews","setIsProcessing","analysisResults","setAnalysisResults","tabValue","setTabValue","progressLogs","setProgressLogs","logEndRef","addLog","arguments","now","Date","timeStr","toLocaleTimeString","newLog","time","logs","useEffect","scrollIntoView","behavior","connectToSSE","sessionId","eventSource","EventSource","onmessage","agent","final_result","close","onerror","handleAnalysis","analysisOverride","formData","FormData","append","analysisTypes","analysisType","entries","errorText","session_id","substring","paragraph","newImages","newPreviews","handleImageDelete","Delete","handleImageUpload","reader","FileReader","onload","readAsDataURL","htmlFor","AddCircle","multiple","from","slice","idx","slot","ev","Tabs","handleTabChange","newValue","indicatorColor","textColor","centered","Tab","Info","Compare","Search","gridGap","renderAnalysisResults","productInfo","Object","imageKey","productData","product_type","key_features","feature","specifications","_ref2","comparison","valueAnalysis","recommendation","createMuiTheme","typography","App","selectedImage","setSelectedImage","setImageBase64","setSelectedModel","setResults","setModelsStatus","activeTab","setActiveTab","then","catch","ThemeProvider","AppBar","Toolbar","Container","File","dataUrl","endpoint","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7f0b632e.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react';\nimport { \n  Paper, \n  Typography, \n  Box, \n  Button, \n  IconButton \n} from '@material-ui/core';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    padding: theme.spacing(2),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    height: '100%',\n    minHeight: 300,\n    transition: 'all 0.3s ease'\n  },\n  dragActive: {\n    border: '2px dashed #3f51b5',\n    backgroundColor: 'rgba(63, 81, 181, 0.05)'\n  },\n  dragInactive: {\n    border: '2px dashed #ccc',\n    backgroundColor: 'white'\n  },\n  uploadBox: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: '100%',\n    width: '100%',\n    cursor: 'pointer'\n  },\n  uploadIcon: {\n    fontSize: 60,\n    color: '#3f51b5',\n    marginBottom: theme.spacing(2)\n  },\n  supportText: {\n    marginTop: theme.spacing(2)\n  },\n  previewBox: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    width: '100%',\n    height: '100%',\n    position: 'relative'\n  },\n  imageContainer: {\n    position: 'relative',\n    width: '100%',\n    // Use a smaller viewport-based height so any aspect ratio fits inside\n    height: '45vh',\n    [theme.breakpoints.down('sm')]: {\n      height: '35vh',\n    },\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    overflow: 'hidden',\n    marginTop: theme.spacing(2),\n  },\n  deleteButton: {\n    position: 'absolute',\n    top: 0,\n    right: 0,\n    backgroundColor: 'rgba(255, 255, 255, 0.7)',\n    '&:hover': {\n      backgroundColor: 'rgba(255, 255, 255, 0.9)',\n    }\n  }\n}));\n\nconst ImageUploader = ({ onImageUpload }) => {\n  const classes = useStyles();\n  const [previewUrl, setPreviewUrl] = useState(null);\n  const [dragActive, setDragActive] = useState(false);\n  const fileInputRef = useRef(null);\n\n  const handleDrag = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (e.type === 'dragenter' || e.type === 'dragover') {\n      setDragActive(true);\n    } else if (e.type === 'dragleave') {\n      setDragActive(false);\n    }\n  };\n\n  const handleDrop = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n    if (e.dataTransfer.files && e.dataTransfer.files[0]) {\n      handleFiles(e.dataTransfer.files[0]);\n    }\n  };\n\n  const handleChange = (e) => {\n    e.preventDefault();\n    if (e.target.files && e.target.files[0]) {\n      handleFiles(e.target.files[0]);\n    }\n  };\n\n  const handleFiles = (file) => {\n    if (file.type.startsWith('image/')) {\n      setPreviewUrl(URL.createObjectURL(file));\n      onImageUpload(file);\n    } else {\n      alert('Please upload an image file');\n    }\n  };\n\n  const onButtonClick = () => {\n    fileInputRef.current.click();\n  };\n\n  const handleRemoveImage = () => {\n    setPreviewUrl(null);\n    onImageUpload(null);\n    fileInputRef.current.value = \"\";\n  };\n\n  return (\n    <Paper \n      className={`${classes.paper} ${dragActive ? classes.dragActive : classes.dragInactive}`}\n      onDragEnter={handleDrag}\n      onDragLeave={handleDrag}\n      onDragOver={handleDrag}\n      onDrop={handleDrop}\n    >\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        accept=\"image/*\"\n        onChange={handleChange}\n        style={{ display: 'none' }}\n      />\n\n      {!previewUrl ? (\n        <Box \n          className={classes.uploadBox}\n          onClick={onButtonClick}\n        >\n          <CloudUploadIcon className={classes.uploadIcon} />\n          <Typography variant=\"h6\" gutterBottom>\n            Drag & Drop an image here\n          </Typography>\n          <Typography variant=\"body2\" color=\"textSecondary\" gutterBottom>\n            or\n          </Typography>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            component=\"span\"\n            startIcon={<CloudUploadIcon />}\n          >\n            Browse Files\n          </Button>\n          <Typography variant=\"body2\" color=\"textSecondary\" className={classes.supportText}>\n            Supported formats: JPG, PNG, GIF\n          </Typography>\n        </Box>\n      ) : (\n        <Box className={classes.previewBox}>\n          <Typography variant=\"h6\" gutterBottom>\n            Preview\n          </Typography>\n          <Box className={classes.imageContainer}>\n            <img\n              src={previewUrl}\n              alt=\"Preview\"\n              className=\"preview-image\"\n              style={{\n                maxWidth: '100%',\n                maxHeight: '100%',\n                width: 'auto',\n                height: 'auto',\n                objectFit: 'contain',\n                display: 'block'\n              }}\n            />\n            <IconButton\n              aria-label=\"delete\"\n              className={classes.deleteButton}\n              onClick={handleRemoveImage}\n            >\n              <DeleteIcon />\n            </IconButton>\n          </Box>\n        </Box>\n      )}\n    </Paper>\n  );\n};\n\nexport default ImageUploader;\n","import React from 'react';\nimport { \n  Grid, \n  Card, \n  CardContent, \n  CardActions, \n  Typography, \n  Button, \n  Chip,\n  Box\n} from '@material-ui/core';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport CategoryIcon from '@material-ui/icons/Category';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  selectedCard: {\n    border: '2px solid #3f51b5',\n  },\n  unavailableCard: {\n    opacity: 0.6,\n  },\n  cardContent: {\n    flexGrow: 1,\n  },\n  chipContainer: {\n    marginBottom: theme.spacing(1.5),\n  },\n  successChip: {\n    backgroundColor: '#34C759',\n    color: '#fff',\n  },\n  errorChip: {\n    backgroundColor: '#FF3B3F',\n    color: '#fff',\n  },\n  modelType: {\n    marginTop: theme.spacing(1),\n  },\n  processButton: {\n    marginTop: theme.spacing(3),\n    textAlign: 'center',\n  }\n}));\n\nconst ModelSelector = ({ \n  onModelSelect, \n  onProcess, \n  isProcessing, \n  modelsStatus, \n  selectedModel,\n  imageSelected \n}) => {\n  const classes = useStyles();\n  \n  const models = [\n    {\n      id: 'yolo',\n      name: 'YOLOv8',\n      description: 'Fast and accurate object detection',\n      icon: <VisibilityIcon />,\n      available: modelsStatus.yolo\n    },\n    {\n      id: 'detr',\n      name: 'DETR',\n      description: 'DEtection TRansformer for object detection',\n      icon: <VisibilityIcon />,\n      available: modelsStatus.detr\n    },\n    {\n      id: 'vit',\n      name: 'ViT',\n      description: 'Vision Transformer for image classification',\n      icon: <CategoryIcon />,\n      available: modelsStatus.vit\n    }\n  ];\n\n  const handleModelClick = (modelId) => {\n    if (models.find(m => m.id === modelId).available) {\n      onModelSelect(modelId);\n    }\n  };\n\n  return (\n    <Box sx={{ p: 2, height: '100%' }}>\n      <Typography variant=\"h6\" gutterBottom>\n        Select Model\n      </Typography>\n      \n      <Grid container spacing={2}>\n        {models.map((model) => (\n          <Grid item xs={12} sm={4} key={model.id}>\n            <Card \n              className={`\n                ${classes.card} \n                ${selectedModel === model.id ? classes.selectedCard : ''} \n                ${!model.available ? classes.unavailableCard : ''}\n              `}\n              onClick={() => handleModelClick(model.id)}\n            >\n              <CardContent className={classes.cardContent}>\n                <Box sx={{ mb: 2, color: 'primary' }}>\n                  {model.icon}\n                </Box>\n                <Typography variant=\"h5\" component=\"div\" gutterBottom>\n                  {model.name}\n                </Typography>\n                <div className={classes.chipContainer}>\n                  {model.available ? (\n                    <Chip \n                      label=\"Available\" \n                      className={classes.successChip}\n                      size=\"small\" \n                    />\n                  ) : (\n                    <Chip \n                      label=\"Not Available\" \n                      className={classes.errorChip}\n                      size=\"small\" \n                    />\n                  )}\n                </div>\n                <Typography variant=\"body2\" color=\"textSecondary\">\n                  {model.description}\n                </Typography>\n              </CardContent>\n              <CardActions>\n                <Button \n                  size=\"small\" \n                  onClick={() => handleModelClick(model.id)}\n                  disabled={!model.available}\n                  color={selectedModel === model.id ? \"primary\" : \"default\"}\n                  variant={selectedModel === model.id ? \"contained\" : \"outlined\"}\n                  fullWidth\n                >\n                  {selectedModel === model.id ? 'Selected' : 'Select'}\n                </Button>\n              </CardActions>\n            </Card>\n          </Grid>\n        ))}\n      </Grid>\n\n      <div className={classes.processButton}>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          size=\"large\"\n          startIcon={<PlayArrowIcon />}\n          onClick={onProcess}\n          disabled={!selectedModel || !imageSelected || isProcessing}\n        >\n          {isProcessing ? 'Processing...' : 'Process Image'}\n        </Button>\n      </div>\n    </Box>\n  );\n};\n\nexport default ModelSelector;\n","import React, { useState } from 'react';\nimport { \n  Button, \n  Box, \n  Typography, \n  CircularProgress, \n  Snackbar,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Grid,\n  Card,\n  CardMedia,\n  CardContent,\n  Chip\n} from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n    padding: theme.spacing(2),\n    backgroundColor: '#f5f5f5',\n    borderRadius: theme.shape.borderRadius,\n  },\n  button: {\n    marginRight: theme.spacing(2),\n  },\n  searchDialog: {\n    minWidth: '500px',\n  },\n  formControl: {\n    marginBottom: theme.spacing(2),\n    minWidth: '100%',\n  },\n  searchResults: {\n    marginTop: theme.spacing(2),\n  },\n  resultCard: {\n    marginBottom: theme.spacing(2),\n  },\n  resultImage: {\n    height: 140,\n    objectFit: 'contain',\n  },\n  chip: {\n    margin: theme.spacing(0.5),\n  },\n  similarityChip: {\n    backgroundColor: theme.palette.primary.main,\n    color: 'white',\n  }\n}));\n\nconst VectorDBActions = ({ results }) => {\n  const classes = useStyles();\n  const [isSaving, setIsSaving] = useState(false);\n  const [saveSuccess, setSaveSuccess] = useState(false);\n  const [saveError, setSaveError] = useState(null);\n  const [openSearchDialog, setOpenSearchDialog] = useState(false);\n  const [searchType, setSearchType] = useState('image');\n  const [searchClass, setSearchClass] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  const [isSearching, setIsSearching] = useState(false);\n  const [searchError, setSearchError] = useState(null);\n  \n  // Extract model and data from results\n  const { model, data } = results;\n  \n  // Handle saving to vector DB\n  const handleSaveToVectorDB = async () => {\n    setIsSaving(true);\n    setSaveError(null);\n    \n    try {\n      let response;\n      \n      if (model === 'vit') {\n        // For ViT, save the whole image with classifications\n        response = await fetch('/api/add-to-collection', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            image: data.image,\n            metadata: {\n              model: 'vit',\n              classifications: data.classifications\n            }\n          })\n        });\n      } else {\n        // For YOLO and DETR, save detected objects\n        response = await fetch('/api/add-detected-objects', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            image: data.image,\n            objects: data.detections,\n            imageId: generateUUID()\n          })\n        });\n      }\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      \n      const result = await response.json();\n      \n      if (result.error) {\n        throw new Error(result.error);\n      }\n      \n      setSaveSuccess(true);\n      setTimeout(() => setSaveSuccess(false), 5000);\n    } catch (err) {\n      console.error('Error saving to vector DB:', err);\n      setSaveError(`Error saving to vector DB: ${err.message}`);\n    } finally {\n      setIsSaving(false);\n    }\n  };\n  \n  // Handle opening search dialog\n  const handleOpenSearchDialog = () => {\n    setOpenSearchDialog(true);\n    setSearchResults([]);\n    setSearchError(null);\n  };\n  \n  // Handle closing search dialog\n  const handleCloseSearchDialog = () => {\n    setOpenSearchDialog(false);\n  };\n  \n  // Handle search type change\n  const handleSearchTypeChange = (event) => {\n    setSearchType(event.target.value);\n    setSearchResults([]);\n    setSearchError(null);\n  };\n  \n  // Handle search class change\n  const handleSearchClassChange = (event) => {\n    setSearchClass(event.target.value);\n  };\n  \n  // Handle search\n  const handleSearch = async () => {\n    setIsSearching(true);\n    setSearchError(null);\n    \n    try {\n      let requestBody = {};\n      \n      if (searchType === 'image') {\n        // Search by current image\n        requestBody = {\n          searchType: 'image',\n          image: data.image,\n          n_results: 5\n        };\n      } else {\n        // Search by class name\n        if (!searchClass.trim()) {\n          throw new Error('Please enter a class name');\n        }\n        \n        requestBody = {\n          searchType: 'class',\n          class_name: searchClass.trim(),\n          n_results: 5\n        };\n      }\n      \n      const response = await fetch('/api/search-similar-objects', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(requestBody)\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      \n      const result = await response.json();\n      \n      if (result.error) {\n        throw new Error(result.error);\n      }\n      \n      console.log('Search API response:', result);\n      \n      // The backend responds with {success, searchType, results} structure, so extract only the results array\n      if (result.success && Array.isArray(result.results)) {\n        console.log('Setting search results array:', result.results);\n        console.log('Results array length:', result.results.length);\n        console.log('First result item:', result.results[0]);\n        setSearchResults(result.results);\n      } else {\n        console.error('Unexpected API response format:', result);\n        throw new Error('Unexpected API response format');\n      }\n    } catch (err) {\n      console.error('Error searching vector DB:', err);\n      setSearchError(`Error searching vector DB: ${err.message}`);\n    } finally {\n      setIsSearching(false);\n    }\n  };\n  \n  // Generate UUID for image ID\n  const generateUUID = () => {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n      const r = Math.random() * 16 | 0;\n      const v = c === 'x' ? r : (r & 0x3 | 0x8);\n      return v.toString(16);\n    });\n  };\n  \n  // Render search results\n  const renderSearchResults = () => {\n    console.log('Rendering search results:', searchResults);\n    console.log('Search results length:', searchResults.length);\n    \n    if (searchResults.length === 0) {\n      console.log('No results to render');\n      return (\n        <Typography variant=\"body1\">No results found.</Typography>\n      );\n    }\n    \n    return (\n      <Grid container spacing={2}>\n        {searchResults.map((result, index) => {\n          const similarity = (1 - result.distance) * 100;\n          \n          return (\n            <Grid item xs={12} sm={6} key={index}>\n              <Card className={classes.resultCard}>\n                {result.metadata && result.metadata.image_data ? (\n                  <CardMedia\n                    className={classes.resultImage}\n                    component=\"img\"\n                    height=\"200\"\n                    image={`data:image/jpeg;base64,${result.metadata.image_data}`}\n                    alt={result.metadata && result.metadata.class ? result.metadata.class : 'Object'}\n                  />\n                ) : (\n                  <Box \n                    className={classes.resultImage}\n                    style={{ \n                      backgroundColor: '#f0f0f0', \n                      display: 'flex', \n                      alignItems: 'center', \n                      justifyContent: 'center',\n                      height: 200\n                    }}\n                  >\n                    <Typography variant=\"body2\" color=\"textSecondary\">\n                      {result.metadata && result.metadata.class ? result.metadata.class : 'Object'} Image\n                    </Typography>\n                  </Box>\n                )}\n                <CardContent>\n                  <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={1}>\n                    <Typography variant=\"subtitle1\">Result #{index + 1}</Typography>\n                    <Chip \n                      label={`Similarity: ${similarity.toFixed(2)}%`}\n                      className={classes.similarityChip}\n                      size=\"small\"\n                    />\n                  </Box>\n                  <Typography variant=\"body2\" color=\"textSecondary\">\n                    <strong>Class:</strong> {result.metadata.class || 'N/A'}\n                  </Typography>\n                  {result.metadata.confidence && (\n                    <Typography variant=\"body2\" color=\"textSecondary\">\n                      <strong>Confidence:</strong> {(result.metadata.confidence * 100).toFixed(2)}%\n                    </Typography>\n                  )}\n                  <Typography variant=\"body2\" color=\"textSecondary\">\n                    <strong>Object ID:</strong> {result.id}\n                  </Typography>\n                </CardContent>\n              </Card>\n            </Grid>\n          );\n        })}\n      </Grid>\n    );\n  };\n  \n  return (\n    <Box className={classes.root}>\n      <Typography variant=\"h6\" gutterBottom>\n        Vector Database Actions\n      </Typography>\n      \n      <Box display=\"flex\" alignItems=\"center\" mb={2}>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={handleSaveToVectorDB}\n          disabled={isSaving}\n          className={classes.button}\n        >\n          {isSaving ? (\n            <>\n              <CircularProgress size={20} color=\"inherit\" style={{ marginRight: 8 }} />\n              Saving...\n            </>\n          ) : (\n            'Save to Vector DB'\n          )}\n        </Button>\n        \n        <Button\n          variant=\"outlined\"\n          color=\"primary\"\n          onClick={handleOpenSearchDialog}\n          className={classes.button}\n        >\n          Search Similar\n        </Button>\n      </Box>\n      \n      {saveError && (\n        <Alert severity=\"error\" style={{ marginTop: 8 }}>\n          {saveError}\n        </Alert>\n      )}\n      \n      <Snackbar open={saveSuccess} autoHideDuration={5000} onClose={() => setSaveSuccess(false)}>\n        <Alert severity=\"success\">\n          {model === 'vit' ? (\n            'Image and classifications successfully saved to vector DB!'\n          ) : (\n            'Detected objects successfully saved to vector DB!'\n          )}\n        </Alert>\n      </Snackbar>\n      \n      {/* Search Dialog */}\n      <Dialog\n        open={openSearchDialog}\n        onClose={handleCloseSearchDialog}\n        maxWidth=\"md\"\n        fullWidth\n      >\n        <DialogTitle>Search Vector Database</DialogTitle>\n        <DialogContent>\n          <FormControl className={classes.formControl}>\n            <InputLabel id=\"search-type-label\">Search Type</InputLabel>\n            <Select\n              labelId=\"search-type-label\"\n              id=\"search-type\"\n              value={searchType}\n              onChange={handleSearchTypeChange}\n            >\n              <MenuItem value=\"image\">Search by Current Image</MenuItem>\n              <MenuItem value=\"class\">Search by Class Name</MenuItem>\n            </Select>\n          </FormControl>\n          \n          {searchType === 'class' && (\n            <FormControl className={classes.formControl}>\n              <TextField\n                label=\"Class Name\"\n                value={searchClass}\n                onChange={handleSearchClassChange}\n                placeholder=\"e.g. person, car, dog...\"\n                fullWidth\n              />\n            </FormControl>\n          )}\n          \n          {searchError && (\n            <Alert severity=\"error\" style={{ marginBottom: 16 }}>\n              {searchError}\n            </Alert>\n          )}\n          \n          <Box className={classes.searchResults}>\n            {isSearching ? (\n              <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" p={4}>\n                <CircularProgress />\n                <Typography variant=\"body1\" style={{ marginLeft: 16 }}>\n                  Searching...\n                </Typography>\n              </Box>\n            ) : (\n              <>\n                {console.log('Search dialog render - searchResults:', searchResults)}\n                {searchResults.length > 0 ? renderSearchResults() : \n                  <Typography variant=\"body1\">No results found. Please try another search.</Typography>\n                }\n              </>\n            )}\n          </Box>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleCloseSearchDialog} color=\"default\">\n            Close\n          </Button>\n          <Button \n            onClick={handleSearch} \n            color=\"primary\" \n            variant=\"contained\"\n            disabled={isSearching || (searchType === 'class' && !searchClass.trim())}\n          >\n            Search\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default VectorDBActions;\n","import React from 'react';\nimport { \n  Paper, \n  Typography, \n  Box, \n  List, \n  ListItem, \n  ListItemText, \n  Divider,\n  Grid,\n  Chip\n} from '@material-ui/core';\nimport VectorDBActions from './VectorDBActions';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    padding: theme.spacing(2)\n  },\n  marginBottom: {\n    marginBottom: theme.spacing(2)\n  },\n  resultImage: {\n    maxWidth: '100%',\n    maxHeight: '400px',\n    objectFit: 'contain'\n  },\n  dividerMargin: {\n    margin: `${theme.spacing(2)}px 0`\n  },\n  chipContainer: {\n    display: 'flex',\n    gap: theme.spacing(1),\n    flexWrap: 'wrap'\n  }\n}));\n\nconst ResultDisplay = ({ results }) => {\n  const classes = useStyles();\n  if (!results) return null;\n  \n  const { model, data } = results;\n  \n  // Helper to format times nicely\n  const formatTime = (ms) => {\n    if (ms === undefined || ms === null || isNaN(ms)) return '-';\n    const num = Number(ms);\n    if (num < 1000) return `${num.toFixed(2)} ms`;\n    return `${(num / 1000).toFixed(2)} s`;\n  };\n  \n  // Check if there's an error\n  if (data.error) {\n    return (\n      <Paper sx={{ p: 2, bgcolor: '#ffebee' }}>\n        <Typography color=\"error\">{data.error}</Typography>\n      </Paper>\n    );\n  }\n\n  // Display performance info\n  const renderPerformanceInfo = () => {\n    if (!data.performance) return null;\n    \n    return (\n      <Box className=\"performance-info\">\n        <Divider className={classes.dividerMargin} />\n        <Typography variant=\"body2\">\n          Inference time: {formatTime(data.performance.inference_time)} on {data.performance.device}\n        </Typography>\n      </Box>\n    );\n  };\n\n  // Render for YOLO and DETR (object detection)\n  if (model === 'yolo' || model === 'detr') {\n    return (\n      <Paper className={classes.paper}>\n        <Typography variant=\"h6\" gutterBottom>\n          {model === 'yolo' ? 'YOLOv8' : 'DETR'} Detection Results\n        </Typography>\n        \n        <Grid container spacing={3}>\n          <Grid item xs={12} md={6}>\n            {data.image && (\n              <Box className={classes.marginBottom}>\n                <Typography variant=\"subtitle1\" gutterBottom>\n                  Detection Result\n                </Typography>\n                <img \n                  src={`data:image/png;base64,${data.image}`} \n                  alt=\"Detection Result\" \n                  className={classes.resultImage}\n                />\n              </Box>\n            )}\n          </Grid>\n          \n          <Grid item xs={12} md={6}>\n            <Box className={classes.marginBottom}>\n              <Typography variant=\"subtitle1\" gutterBottom>\n                Detected Objects:\n              </Typography>\n              \n              {data.detections && data.detections.length > 0 ? (\n                <List>\n                  {data.detections.map((detection, index) => (\n                    <React.Fragment key={index}>\n                      <ListItem>\n                        <ListItemText \n                          primary={\n                            <Box style={{ display: 'flex', alignItems: 'center' }}>\n                              <Typography variant=\"body1\" component=\"span\">\n                                {detection.class}\n                              </Typography>\n                              <Chip \n                                label={`${(detection.confidence * 100).toFixed(0)}%`}\n                                size=\"small\"\n                                color=\"primary\"\n                                style={{ marginLeft: 8 }}\n                              />\n                            </Box>\n                          } \n                          secondary={`Bounding Box: [${detection.bbox.join(', ')}]`} \n                        />\n                      </ListItem>\n                      {index < data.detections.length - 1 && <Divider />}\n                    </React.Fragment>\n                  ))}\n                </List>\n              ) : (\n                <Typography variant=\"body1\">No objects detected</Typography>\n              )}\n            </Box>\n          </Grid>\n        </Grid>\n        \n        {renderPerformanceInfo()}\n        \n        {/* Vector DB Actions for Object Detection */}\n        <VectorDBActions results={results} />\n      </Paper>\n    );\n  }\n  \n  // Render for ViT (classification)\n  if (model === 'vit') {\n    return (\n      <Paper className={classes.paper}>\n        <Typography variant=\"h6\" gutterBottom>\n          ViT Classification Results\n        </Typography>\n        \n        <Typography variant=\"subtitle1\" gutterBottom>\n          Top Predictions:\n        </Typography>\n        \n        {data.top_predictions && data.top_predictions.length > 0 ? (\n          <List>\n            {data.top_predictions.map((prediction, index) => (\n              <React.Fragment key={index}>\n                <ListItem>\n                  <ListItemText \n                    primary={\n                      <Box style={{ display: 'flex', alignItems: 'center' }}>\n                        <Typography variant=\"body1\" component=\"span\">\n                          {prediction.rank}. {prediction.class}\n                        </Typography>\n                        <Chip \n                          label={`${(prediction.probability * 100).toFixed(1)}%`}\n                          size=\"small\"\n                          color={index === 0 ? \"primary\" : \"default\"}\n                          style={{ marginLeft: 8 }}\n                        />\n                      </Box>\n                    } \n                  />\n                </ListItem>\n                {index < data.top_predictions.length - 1 && <Divider />}\n              </React.Fragment>\n            ))}\n          </List>\n        ) : (\n          <Typography variant=\"body1\">No classifications available</Typography>\n        )}\n        \n        {renderPerformanceInfo()}\n        \n        {/* Vector DB Actions for ViT Classification */}\n        <VectorDBActions results={results} />\n      </Paper>\n    );\n  }\n  \n  return null;\n};\n\nexport default ResultDisplay;\n","import React, { useState } from 'react';\nimport { \n  Paper, \n  Typography, \n  Box, \n  TextField, \n  Button, \n  CircularProgress,\n  Divider\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    padding: theme.spacing(2),\n    marginTop: theme.spacing(2)\n  },\n  marginBottom: {\n    marginBottom: theme.spacing(2)\n  },\n  dividerMargin: {\n    margin: `${theme.spacing(2)}px 0`\n  },\n  responseBox: {\n    padding: theme.spacing(2),\n    backgroundColor: '#f5f5f5',\n    borderRadius: theme.shape.borderRadius,\n    marginTop: theme.spacing(2),\n    whiteSpace: 'pre-wrap'\n  },\n  buttonProgress: {\n    marginLeft: theme.spacing(1)\n  }\n}));\n\nconst LlmAnalysis = ({ visionResults, model }) => {\n  const classes = useStyles();\n  const [userQuery, setUserQuery] = useState('');\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const [analysisResult, setAnalysisResult] = useState(null);\n  const [error, setError] = useState(null);\n\n  // Format time for display\n  const formatTime = (ms) => {\n    if (ms === undefined || ms === null || isNaN(ms)) return '-';\n    const num = Number(ms);\n    if (num < 1000) return `${num.toFixed(2)} ms`;\n    return `${(num / 1000).toFixed(2)} s`;\n  };\n\n  const handleAnalyze = async () => {\n    if (!userQuery.trim()) return;\n    \n    setIsAnalyzing(true);\n    setError(null);\n    \n    try {\n      const response = await fetch('/api/analyze', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          visionResults: visionResults,\n          userQuery: userQuery\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      \n      if (data.error) {\n        setError(data.error);\n      } else {\n        setAnalysisResult(data);\n      }\n    } catch (err) {\n      console.error('Error analyzing with LLM:', err);\n      setError(`Error analyzing with LLM: ${err.message}`);\n    } finally {\n      setIsAnalyzing(false);\n    }\n  };\n\n  if (!visionResults) return null;\n\n  return (\n    <Paper className={classes.paper}>\n      <Typography variant=\"h6\" gutterBottom>\n        Ask AI about the {model === 'vit' ? 'Classification' : 'Detection'} Results\n      </Typography>\n      \n      <Typography variant=\"body2\" className={classes.marginBottom}>\n        Ask a question about the detected objects or classifications to get an AI-powered analysis.\n      </Typography>\n      \n      <TextField\n        fullWidth\n        label=\"Your question about the image\"\n        variant=\"outlined\"\n        value={userQuery}\n        onChange={(e) => setUserQuery(e.target.value)}\n        disabled={isAnalyzing}\n        className={classes.marginBottom}\n        placeholder={model === 'vit' \n          ? \"E.g., What category does this image belong to?\" \n          : \"E.g., How many people are in this image?\"}\n      />\n      \n      <Button \n        variant=\"contained\" \n        color=\"primary\"\n        onClick={handleAnalyze}\n        disabled={isAnalyzing || !userQuery.trim()}\n      >\n        Analyze with AI\n        {isAnalyzing && <CircularProgress size={24} className={classes.buttonProgress} />}\n      </Button>\n      \n      {error && (\n        <Box mt={2}>\n          <Typography color=\"error\">{error}</Typography>\n        </Box>\n      )}\n      \n      {analysisResult && (\n        <>\n          <Divider className={classes.dividerMargin} />\n          \n          <Typography variant=\"subtitle1\" gutterBottom>\n            AI Analysis:\n          </Typography>\n          \n          <Box className={classes.responseBox}>\n            <Typography variant=\"body1\">\n              {analysisResult.response}\n            </Typography>\n          </Box>\n          \n          {analysisResult.performance && (\n            <Box mt={1}>\n              <Typography variant=\"body2\" color=\"textSecondary\">\n                Analysis time: {formatTime(analysisResult.performance.inference_time)} on {analysisResult.performance.device}\n              </Typography>\n            </Box>\n          )}\n        </>\n      )}\n    </Paper>\n  );\n};\n\nexport default LlmAnalysis;\n","import React, { useState } from 'react';\nimport {\n  Paper,\n  Typography,\n  Grid,\n  TextField,\n  Button,\n  Divider,\n  MenuItem,\n  Select,\n  FormControl,\n  InputLabel\n} from '@material-ui/core';\n\n// Props:\n// - imageBase64: data URL string of the currently uploaded image (preferred for searchType=image)\nfunction OpenAIChat({ imageBase64 }) {\n  const [apiKey, setApiKey] = useState('');\n  const [prompt, setPrompt] = useState('');\n  const [response, setResponse] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  // Vision RAG parameters\n  const [searchType, setSearchType] = useState('image');\n  const [objectId, setObjectId] = useState('');\n  const [className, setClassName] = useState('');\n  const [nResults, setNResults] = useState(5);\n\n  const onSend = async () => {\n    setError('');\n    setResponse('');\n    const q = (prompt || '').trim();\n    if (!q) { setError('Please enter a question.'); return; }\n\n    // Build request body for /api/vision-rag/query\n    const body = {\n      userQuery: q,\n      searchType: searchType,\n      n_results: Number(nResults) || 5,\n    };\n    if (apiKey) body.api_key = apiKey;\n    if (searchType === 'image') {\n      if (!imageBase64) { setError('Image is required. Please upload an image first.'); return; }\n      body.image = imageBase64;\n    } else if (searchType === 'object') {\n      if (!objectId.trim()) { setError('Please enter an objectId.'); return; }\n      body.objectId = objectId.trim();\n    } else if (searchType === 'class') {\n      if (!className.trim()) { setError('Please enter a class_name.'); return; }\n      body.class_name = className.trim();\n    }\n\n    setLoading(true);\n    try {\n      const res = await fetch('/api/vision-rag/query', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'include',\n        body: JSON.stringify(body)\n      });\n\n      if (!res.ok) {\n        let txt = await res.text();\n        try { txt = JSON.stringify(JSON.parse(txt), null, 2); } catch {}\n        throw new Error(txt);\n      }\n      const data = await res.json();\n      const meta = `Model: ${data.model || '-'} | Latency: ${data.latency_sec || '-'}s`;\n      \n      // Format search results\n      let retrievedText = '';\n      if (data.retrieved && data.retrieved.length > 0) {\n        retrievedText = '\\n\\nSearch Results:\\n';\n        data.retrieved.forEach((item, index) => {\n          retrievedText += `${index + 1}. ID: ${item.id || '-'}\\n`;\n          if (item.meta) {\n            retrievedText += `   Class: ${item.meta.class || '-'}\\n`;\n            retrievedText += `   Confidence: ${item.meta.confidence || '-'}\\n`;\n          }\n          retrievedText += `   Similarity: ${item.distance ? item.distance.toFixed(4) : '-'}\\n`;\n        });\n      }\n      \n      setResponse((data.answer || '(No response)') + retrievedText + '\\n\\n---\\n' + meta);\n    } catch (e) {\n      setError('Error: ' + e.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const onClear = () => {\n    setPrompt('');\n    setResponse('');\n    setError('');\n  };\n\n  return (\n    <Paper style={{ padding: 16 }}>\n      <Typography variant=\"h5\" gutterBottom>\n        Vision RAG (LangChain)\n      </Typography>\n      <Typography variant=\"body2\" color=\"textSecondary\" gutterBottom>\n        If OPENAI_API_KEY is set on the server, API Key is optional. Select a search type and send a question to get answers based on context retrieved from the vector DB.\n      </Typography>\n      <Grid container spacing={2}>\n        <Grid item xs={12} md={6}>\n          <FormControl fullWidth variant=\"outlined\" size=\"small\">\n            <InputLabel id=\"search-type-label\">Search Type</InputLabel>\n            <Select\n              labelId=\"search-type-label\"\n              value={searchType}\n              onChange={(e) => setSearchType(e.target.value)}\n              label=\"Search Type\"\n            >\n              <MenuItem value=\"image\">image (current upload)</MenuItem>\n              <MenuItem value=\"object\">object (objectId)</MenuItem>\n              <MenuItem value=\"class\">class (class_name)</MenuItem>\n            </Select>\n          </FormControl>\n        </Grid>\n        <Grid item xs={12} md={6}>\n          <TextField\n            label=\"OpenAI API Key (optional)\"\n            value={apiKey}\n            onChange={(e) => setApiKey(e.target.value)}\n            fullWidth\n            variant=\"outlined\"\n            size=\"small\"\n            type=\"password\"\n            placeholder=\"sk-...\"\n          />\n        </Grid>\n\n        {searchType === 'object' && (\n          <Grid item xs={12} md={6}>\n            <TextField\n              label=\"objectId\"\n              value={objectId}\n              onChange={(e) => setObjectId(e.target.value)}\n              fullWidth\n              variant=\"outlined\"\n              size=\"small\"\n            />\n          </Grid>\n        )}\n        {searchType === 'class' && (\n          <Grid item xs={12} md={6}>\n            <TextField\n              label=\"class_name\"\n              value={className}\n              onChange={(e) => setClassName(e.target.value)}\n              fullWidth\n              variant=\"outlined\"\n              size=\"small\"\n              placeholder=\"e.g. person, car, dog\"\n            />\n          </Grid>\n        )}\n        <Grid item xs={12} md={6}>\n          <TextField\n            label=\"n_results\"\n            value={nResults}\n            onChange={(e) => setNResults(e.target.value)}\n            fullWidth\n            variant=\"outlined\"\n            size=\"small\"\n            type=\"number\"\n            inputProps={{ min: 1, max: 50 }}\n          />\n        </Grid>\n\n        <Grid item xs={12}>\n          <TextField\n            label=\"User Question\"\n            value={prompt}\n            onChange={(e) => setPrompt(e.target.value)}\n            fullWidth\n            multiline\n            rows={4}\n            variant=\"outlined\"\n            placeholder={searchType === 'image' ? 'Answer based on the uploaded image' : 'Answer using the retrieved object context'}\n          />\n        </Grid>\n        {error && (\n          <Grid item xs={12}>\n            <Typography color=\"error\">{error}</Typography>\n          </Grid>\n        )}\n        <Grid item xs={12}>\n          <div style={{ display: 'flex', gap: 8 }}>\n            <Button color=\"primary\" variant=\"contained\" onClick={onSend} disabled={loading}>\n              {loading ? 'Sending...' : 'Send Question'}\n            </Button>\n            <Button variant=\"outlined\" onClick={onClear}>Clear</Button>\n          </div>\n        </Grid>\n        <Grid item xs={12}>\n          <Divider style={{ margin: '12px 0' }} />\n          <Typography variant=\"subtitle2\" color=\"textSecondary\">Response</Typography>\n          <pre style={{ whiteSpace: 'pre-wrap', fontFamily: 'ui-monospace, monospace' }}>{response}</pre>\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n}\n\nexport default OpenAIChat;\n","import React, { useState, useEffect, useRef } from 'react';\nimport { \n  Box, \n  Paper, \n  Grid, \n  Typography, \n  Button,\n  CircularProgress,\n  Tabs,\n  Tab,\n  Divider,\n  Card,\n  CardContent,\n  CardMedia,\n  IconButton,\n  TextField\n} from '@material-ui/core';\nimport { AddCircle, Delete, Compare, Search, Info } from '@material-ui/icons';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    marginTop: theme.spacing(3),\n    marginBottom: theme.spacing(3),\n  },\n  imageContainer: {\n    position: 'relative',\n    minHeight: '360px',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    border: '2px dashed #ccc',\n    borderRadius: '8px',\n    margin: theme.spacing(1),\n    padding: theme.spacing(1),\n    backgroundColor: '#fafafa',\n    overflow: 'hidden',\n  },\n  progressLog: {\n    marginTop: theme.spacing(2),\n    height: '200px',\n    overflowY: 'auto',\n    backgroundColor: '#f8f9fa',\n    padding: theme.spacing(1),\n    borderRadius: '4px',\n    fontFamily: 'monospace',\n    fontSize: '0.9rem',\n  },\n  logEntry: {\n    margin: '4px 0',\n    padding: '2px 5px',\n    borderLeft: '3px solid #ccc',\n  },\n  logEntryAgent: {\n    borderLeft: '3px solid #2196f3',\n  },\n  logEntrySystem: {\n    borderLeft: '3px solid #4caf50',\n  },\n  logEntryError: {\n    borderLeft: '3px solid #f44336',\n  },\n  logTime: {\n    color: '#666',\n    fontSize: '0.8rem',\n    marginRight: theme.spacing(1),\n  },\n  imagePreview: {\n    width: '100%',\n    height: 'auto',\n    maxHeight: '60vh',\n    objectFit: 'contain',\n  },\n  uploadIcon: {\n    fontSize: '3rem',\n    color: '#aaa',\n  },\n  uploadInput: {\n    display: 'none',\n  },\n  deleteButton: {\n    position: 'absolute',\n    top: '8px',\n    right: '8px',\n    backgroundColor: 'rgba(255, 255, 255, 0.8)',\n    '&:hover': {\n      backgroundColor: 'rgba(255, 255, 255, 0.9)',\n    },\n  },\n  tabPanel: {\n    padding: theme.spacing(2),\n  },\n  resultCard: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n  },\n  comparisonTable: {\n    width: '100%',\n    borderCollapse: 'collapse',\n    '& th, & td': {\n      border: '1px solid #ddd',\n      padding: '8px',\n      textAlign: 'left',\n    },\n    '& th': {\n      backgroundColor: '#f2f2f2',\n    },\n    '& tr:nth-child(even)': {\n      backgroundColor: '#f9f9f9',\n    },\n  },\n  loadingContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    padding: theme.spacing(4),\n  },\n  highlight: {\n    backgroundColor: '#e3f2fd',\n    padding: theme.spacing(1),\n    borderRadius: '4px',\n    fontWeight: 'bold',\n  }\n}));\n\n// 분석 유형 탭 패널 컴포넌트\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`analysis-tabpanel-${index}`}\n      aria-labelledby={`analysis-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box p={3}>\n          {children}\n        </Box>\n      )}\n    </div>\n  );\n}\n\nconst ProductComparison = () => {\n  const classes = useStyles();\n  const [images, setImages] = useState([null, null]); // 최대 2개 이미지 저장\n  const [imagePreviews, setImagePreviews] = useState([null, null]);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [analysisResults, setAnalysisResults] = useState(null);\n  const [error, setError] = useState(null);\n  const [tabValue, setTabValue] = useState(0);\n  const [progressLogs, setProgressLogs] = useState([]);\n  const logEndRef = useRef(null);\n\n  // 탭 변경 핸들러\n  const handleTabChange = (event, newValue) => {\n    setTabValue(newValue);\n  };\n\n  // 이미지 업로드 핸들러\n  const handleImageUpload = (event, index) => {\n    const file = event.target.files[0];\n    \n    if (file) {\n      // 이미지 미리보기 생성\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        const newPreviews = [...imagePreviews];\n        newPreviews[index] = e.target.result;\n        setImagePreviews(newPreviews);\n      };\n      reader.readAsDataURL(file);\n      \n      // 이미지 파일 상태 업데이트\n      const newImages = [...images];\n      newImages[index] = file;\n      setImages(newImages);\n      \n      // 결과 및 오류 초기화\n      setAnalysisResults(null);\n      setError(null);\n    }\n  };\n\n  // 이미지 삭제 핸들러\n  const handleImageDelete = (index) => {\n    const newImages = [...images];\n    const newPreviews = [...imagePreviews];\n    \n    newImages[index] = null;\n    newPreviews[index] = null;\n    \n    setImages(newImages);\n    setImagePreviews(newPreviews);\n    setAnalysisResults(null);\n  };\n\n  // 로그 추가 함수\n  const addLog = (message, type = 'info') => {\n    const now = new Date();\n    const timeStr = now.toLocaleTimeString();\n    const newLog = {\n      time: timeStr,\n      message,\n      type // 'info', 'agent', 'system', 'error'\n    };\n    \n    setProgressLogs(logs => [...logs, newLog]);\n  };\n\n  // 로그창 자동 스크롤\n  useEffect(() => {\n    if (logEndRef.current) {\n      logEndRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  }, [progressLogs]);\n\n  // SSE 연결 함수\n  const connectToSSE = (sessionId) => {\n    const eventSource = new EventSource(`/api/product/compare/stream/${sessionId}`);\n    \n    eventSource.onmessage = (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        console.log('React SSE received:', data);\n        \n        if (data.message) {\n          addLog(data.message, data.agent || 'info');\n        } else if (data.status) {\n          addLog(`Status: ${data.status}`, 'system');\n        } else if (data.final_result) {\n          console.log('Final result received:', data.final_result);\n          setAnalysisResults(data.final_result);\n          setIsProcessing(false);\n          eventSource.close();\n        } else if (data.error) {\n          addLog(`Error: ${data.error}`, 'error');\n          setIsProcessing(false);\n          eventSource.close();\n        }\n      } catch (err) {\n        console.error('SSE parsing error:', err);\n        addLog(`Event processing error: ${err.message}`, 'error');\n      }\n    };\n    \n    eventSource.onerror = (err) => {\n      addLog('Server connection lost. Please try again in a moment.', 'error');\n      eventSource.close();\n      setIsProcessing(false);\n    };\n    \n    return eventSource;\n  };\n\n  // 제품 분석 처리 핸들러 (analysisType 강제 가능)\n  const handleAnalysis = async (analysisOverride = null) => {\n    // 유효성 검사: 최소 1개 이상의 이미지가 있어야 함\n    if (!images[0] && !images[1]) {\n      setError('Please upload at least one product image for analysis');\n      return;\n    }\n\n    setIsProcessing(true);\n    setError(null);\n    setProgressLogs([]); // 로그 초기화\n    addLog('Starting product analysis...', 'system');\n    \n    try {\n      const formData = new FormData();\n      \n      // 업로드된 이미지만 FormData에 추가\n      if (images[0]) {\n        formData.append('image1', images[0]);\n        addLog('Product A image uploaded.', 'info');\n      }\n      if (images[1]) {\n        formData.append('image2', images[1]);\n        addLog('Product B image uploaded.', 'info');\n      }\n      \n      // 분석 타입 추가 (탭 인덱스로 구분) 혹은 명시적 override\n      const analysisTypes = ['info', 'compare', 'value', 'recommend'];\n      const analysisType = analysisOverride || analysisTypes[tabValue];\n      formData.append('analysisType', analysisType);\n      addLog(`Analysis type: ${analysisType === 'info' ? 'Product Information' : analysisType === 'compare' ? 'Performance Comparison' : analysisType === 'value' ? 'Value Analysis' : 'Purchase Recommendation'}`, 'system');\n      \n      // 백엔드 API 호출 (세션 시작)\n      addLog('Initializing analysis session...', 'system');\n      \n      // Debug FormData contents\n      for (let [key, value] of formData.entries()) {\n        console.log('FormData:', key, value);\n      }\n      \n      const response = await fetch('/api/product/compare/start', {\n        method: 'POST',\n        body: formData,\n        credentials: 'include', // 세션 쿠키 포함\n      });\n      \n      console.log('Response status:', response.status);\n      console.log('Response headers:', response.headers);\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Error response:', errorText);\n        throw new Error(`HTTP error! Status: ${response.status} - ${errorText}`);\n      }\n      \n      const data = await response.json();\n      const sessionId = data.session_id;\n      \n      if (!sessionId) {\n        throw new Error('Failed to receive session ID');\n      }\n      \n      addLog(`Analysis session started. (Session ID: ${sessionId.substring(0, 8)}...)`, 'system');\n      addLog('Agents are collaborating to analyze products. Please wait a moment...', 'system');\n      \n      // SSE 스트림 연결\n      const eventSource = connectToSSE(sessionId);\n      \n      // 컴포넌트 언마운트시 연결 종료\n      return () => {\n        eventSource.close();\n      };\n      \n    } catch (err) {\n      console.error('제품 분석 오류:', err);\n      addLog(`Error occurred: ${err.message}`, 'error');\n      setError(`Error during analysis: ${err.message}`);\n      setIsProcessing(false);\n    }\n  };\n\n  // 분석 결과 렌더링 함수\n  const renderAnalysisResults = () => {\n    if (!analysisResults) return null;\n    \n    // 분석 유형에 따라 다른 결과 표시\n    switch (tabValue) {\n      case 0: // 제품 정보 탐색\n        return (\n          <Card className={classes.resultCard}>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>Product Information</Typography>\n              <Divider style={{ margin: '8px 0 16px' }} />\n              \n              {analysisResults.productInfo && (\n                <div>\n                  {Object.entries(analysisResults.productInfo).map(([imageKey, productData], index) => (\n                    <div key={imageKey} style={{ marginBottom: '24px' }}>\n                      <Typography variant=\"subtitle1\" gutterBottom>\n                        <strong>Product {index + 1} ({imageKey})</strong>\n                      </Typography>\n                      \n                      <Typography variant=\"body1\">\n                        <strong>Type:</strong> {productData.product_type || 'Unknown'}\n                      </Typography>\n                      \n                      {productData.key_features && productData.key_features.length > 0 && (\n                        <div style={{ marginTop: '12px' }}>\n                          <Typography variant=\"subtitle2\">Key Features:</Typography>\n                          <ul>\n                            {productData.key_features.map((feature, idx) => (\n                              <li key={idx}>\n                                <Typography variant=\"body2\">{feature}</Typography>\n                              </li>\n                            ))}\n                          </ul>\n                        </div>\n                      )}\n                      \n                      {analysisResults.specifications && analysisResults.specifications[imageKey] && (\n                        <div style={{ marginTop: '12px' }}>\n                          <Typography variant=\"subtitle2\">Specifications:</Typography>\n                          <ul>\n                            {Object.entries(analysisResults.specifications[imageKey].specifications || {}).map(([key, value]) => (\n                              <li key={key}>\n                                <Typography variant=\"body2\">\n                                  <strong>{key.replace('_', ' ')}:</strong> {Array.isArray(value) ? value.join(', ') : value}\n                                </Typography>\n                              </li>\n                            ))}\n                          </ul>\n                        </div>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        );\n        \n      case 1: // 제품 성능 비교\n        return (\n          <Card className={classes.resultCard}>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>Product Comparison Analysis</Typography>\n              <Divider style={{ margin: '8px 0 16px' }} />\n              \n              {analysisResults.comparison && (\n                <div>\n                  <Typography variant=\"body1\" style={{ whiteSpace: 'pre-line', marginBottom: '16px' }}>\n                    {typeof analysisResults.comparison === 'string' \n                      ? analysisResults.comparison \n                      : JSON.stringify(analysisResults.comparison, null, 2)\n                    }\n                  </Typography>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        );\n        \n      case 2: // 가격 대비 가치 분석\n        return (\n          <Card className={classes.resultCard}>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>Price-to-Value Analysis</Typography>\n              <Divider style={{ margin: '8px 0 16px' }} />\n              \n              {analysisResults.valueAnalysis && (\n                <div>\n                  <Typography variant=\"body1\" style={{ whiteSpace: 'pre-line', marginBottom: '16px' }}>\n                    {typeof analysisResults.valueAnalysis === 'string' \n                      ? analysisResults.valueAnalysis \n                      : JSON.stringify(analysisResults.valueAnalysis, null, 2)\n                    }\n                  </Typography>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        );\n        \n      case 3: // 최적 구매 추천\n        return (\n          <Card className={classes.resultCard}>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>Purchase Recommendations</Typography>\n              <Divider style={{ margin: '8px 0 16px' }} />\n              \n              {analysisResults.recommendation && (\n                <div>\n                  <Typography variant=\"body1\" style={{ whiteSpace: 'pre-line', marginBottom: '16px' }}>\n                    {typeof analysisResults.recommendation === 'string' \n                      ? analysisResults.recommendation \n                      : JSON.stringify(analysisResults.recommendation, null, 2)\n                    }\n                  </Typography>\n                </div>\n              )}\n              \n              {/* Fallback: Display all analysis results as JSON if no specific data found */}\n              {!analysisResults.recommendation && !analysisResults.valueAnalysis && !analysisResults.comparison && !analysisResults.productInfo && (\n                <div>\n                  <Typography variant=\"body1\" style={{ whiteSpace: 'pre-line', marginBottom: '16px' }}>\n                    {JSON.stringify(analysisResults, null, 2)}\n                  </Typography>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        );\n        \n      default:\n        return null;\n    }\n  };\n\n  return (\n    <Paper className={classes.root}>\n      <Box p={3}>\n        <Typography variant=\"h5\" gutterBottom>\n          Product Comparison Analysis\n        </Typography>\n        <Typography variant=\"body1\" paragraph>\n          Upload product images to receive detailed information and comparison analysis.\n          You can analyze various products including cars, smartphones, laptops, and more.\n        </Typography>\n        \n        <Grid container spacing={3}>\n          {/* 이미지 업로드 영역 */}\n          {[0, 1].map((index) => (\n            <Grid item xs={12} md={6} key={index}>\n              <Box className={classes.imageContainer}>\n                {imagePreviews[index] ? (\n                  <>\n                    <img \n                      src={imagePreviews[index]} \n                      alt={`Product ${index + 1}`}\n                      className={classes.imagePreview}\n                    />\n                    <IconButton\n                      className={classes.deleteButton}\n                      onClick={() => handleImageDelete(index)}\n                    >\n                      <Delete />\n                    </IconButton>\n                  </>\n                ) : (\n                  <>\n                    <input\n                      accept=\"image/*\"\n                      className={classes.uploadInput}\n                      id={`upload-image-${index}`}\n                      type=\"file\"\n                      onChange={(e) => handleImageUpload(e, index)}\n                    />\n                    <label htmlFor={`upload-image-${index}`}>\n                      <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n                        <AddCircle className={classes.uploadIcon} />\n                        <Typography variant=\"body2\" style={{ marginTop: '8px' }}>\n                          Upload {index === 0 ? 'Product A' : 'Product B'} Image\n                        </Typography>\n                      </Box>\n                    </label>\n                  </>\n                )}\n              </Box>\n            </Grid>\n          ))}\n\n          {/* 다중 파일 업로드 (선택 사항): 두 장을 한 번에 업로드 */}\n          <Grid item xs={12}>\n            <input\n              accept=\"image/*\"\n              className={classes.uploadInput}\n              id=\"upload-both-images\"\n              type=\"file\"\n              multiple\n              onChange={(e) => {\n                const files = Array.from(e.target.files || []);\n                if (!files.length) return;\n                const newImages = [...images];\n                const newPreviews = [...imagePreviews];\n                files.slice(0, 2).forEach((file, idx) => {\n                  const slot = idx; // 0,1 순서로 채움\n                  newImages[slot] = file;\n                  const reader = new FileReader();\n                  reader.onload = (ev) => {\n                    newPreviews[slot] = ev.target.result;\n                    setImagePreviews([...newPreviews]);\n                  };\n                  reader.readAsDataURL(file);\n                });\n                setImages(newImages);\n                setAnalysisResults(null);\n                setError(null);\n              }}\n            />\n            <label htmlFor=\"upload-both-images\">\n              <Button variant=\"text\" color=\"default\" component=\"span\">\n                Or select two files at once\n              </Button>\n            </label>\n          </Grid>\n          \n          {/* 분석 유형 탭 */}\n          <Grid item xs={12}>\n            <Paper>\n              <Tabs\n                value={tabValue}\n                onChange={handleTabChange}\n                indicatorColor=\"primary\"\n                textColor=\"primary\"\n                centered\n              >\n                <Tab icon={<Info />} label=\"Product Info\" />\n                <Tab icon={<Compare />} label=\"Performance\" disabled={!images[0] || !images[1]} />\n                <Tab icon={<Search />} label=\"Value Analysis\" />\n                <Tab label=\"Recommendations\" />\n              </Tabs>\n              \n              <Box p={2} display=\"flex\" justifyContent=\"center\" gridGap={12}>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={() => handleAnalysis(null)}\n                  disabled={isProcessing || (!images[0] && !images[1])}\n                  startIcon={isProcessing ? <CircularProgress size={24} /> : null}\n                >\n                  {isProcessing ? 'Analyzing...' : 'Start Analysis'}\n                </Button>\n                <Button\n                  variant=\"outlined\"\n                  color=\"secondary\"\n                  onClick={() => handleAnalysis('compare')}\n                  disabled={isProcessing || !images[0] || !images[1]}\n                  startIcon={<Compare />}\n                >\n                  Compare Products\n                </Button>\n              </Box>\n              \n              {/* 오류 메시지 표시 */}\n              {error && (\n                <Box p={2} bgcolor=\"#ffebee\" borderRadius=\"4px\" mb={2}>\n                  <Typography color=\"error\">{error}</Typography>\n                </Box>\n              )}\n            </Paper>\n          </Grid>\n          \n          {/* 진행 과정 로그 표시 */}\n          <Grid item xs={12}>\n            <Paper>\n              <Box p={2}>\n                <Typography variant=\"h6\" gutterBottom>\n                  Analysis Progress\n                </Typography>\n                <Box className={classes.progressLog}>\n                  {progressLogs.length === 0 ? (\n                    <Typography variant=\"body2\" color=\"textSecondary\" style={{padding: '10px'}}>\n                      Progress details will appear here when analysis starts.\n                    </Typography>\n                  ) : (\n                    progressLogs.map((log, index) => (\n                      <Box \n                        key={index} \n                        className={`${classes.logEntry} ${log.type === 'agent' ? classes.logEntryAgent : log.type === 'system' ? classes.logEntrySystem : log.type === 'error' ? classes.logEntryError : ''}`}\n                      >\n                        <span className={classes.logTime}>[{log.time}]</span>\n                        {log.message}\n                      </Box>\n                    ))\n                  )}\n                  <div ref={logEndRef} />\n                </Box>\n              </Box>\n            </Paper>\n          </Grid>\n\n          {/* 결과 표시 영역 */}\n          <Grid item xs={12}>\n            {isProcessing ? (\n              <Box className={classes.loadingContainer}>\n                <CircularProgress />\n                <Typography variant=\"h6\" style={{ marginTop: '16px' }}>\n                  Analyzing Products...\n                </Typography>\n                <Typography variant=\"body2\" color=\"textSecondary\">\n                  Product recognition, information retrieval, and comparison analysis in progress.\n                </Typography>\n              </Box>\n            ) : renderAnalysisResults()}\n          </Grid>\n        </Grid>\n      </Box>\n    </Paper>\n  );\n};\n\nexport default ProductComparison;\n","import React, { useState, useEffect } from 'react';\nimport { \n  Container, \n  Typography, \n  Box, \n  Paper, \n  Grid, \n  CircularProgress,\n  AppBar,\n  Toolbar,\n  ThemeProvider,\n  createMuiTheme,\n  Tabs,\n  Tab,\n  Button\n} from '@material-ui/core';\nimport ImageUploader from './components/ImageUploader';\nimport ModelSelector from './components/ModelSelector';\nimport ResultDisplay from './components/ResultDisplay';\nimport LlmAnalysis from './components/LlmAnalysis';\nimport OpenAIChat from './components/OpenAIChat';\nimport ProductComparison from './components/ProductComparison';\nimport './App.css';\n\n// Create a theme\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#3f51b5',\n    },\n    secondary: {\n      main: '#f50057',\n    },\n  },\n  typography: {\n    fontFamily: 'Roboto, Arial, sans-serif',\n  },\n});\n\nfunction App() {\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [imageBase64, setImageBase64] = useState('');\n  const [selectedModel, setSelectedModel] = useState('');\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [results, setResults] = useState(null);\n  const [error, setError] = useState(null);\n  const [modelsStatus, setModelsStatus] = useState({\n    yolo: false,\n    detr: false,\n    vit: false\n  });\n  const [activeTab, setActiveTab] = useState(0);\n\n  // Check API status on component mount\n  useEffect(() => {\n    fetch('/api/status')\n      .then(response => response.json())\n      .then(data => {\n        setModelsStatus(data.models);\n      })\n      .catch(err => {\n        console.error('Error checking API status:', err);\n        setError('Error connecting to the backend API. Please make sure the server is running.');\n      });\n  }, []);\n\n  const handleImageUpload = (image) => {\n    setSelectedImage(image);\n    setResults(null);\n    setError(null);\n\n    // Convert uploaded File -> base64 data URL for Vision RAG image search\n    if (image instanceof File) {\n      const reader = new FileReader();\n      reader.onload = () => {\n        const dataUrl = reader.result; // e.g., data:image/png;base64,....\n        setImageBase64(typeof dataUrl === 'string' ? dataUrl : '');\n      };\n      reader.onerror = () => setImageBase64('');\n      reader.readAsDataURL(image);\n    } else {\n      setImageBase64('');\n    }\n  };\n\n  const handleModelSelect = (model) => {\n    setSelectedModel(model);\n    setResults(null);\n    setError(null);\n  };\n\n  const processImage = async () => {\n    if (!selectedImage || !selectedModel) {\n      setError('Please select both an image and a model');\n      return;\n    }\n\n    setIsProcessing(true);\n    setError(null);\n\n    // Create form data for the image\n    const formData = new FormData();\n    formData.append('image', selectedImage);\n\n    let endpoint = '';\n    switch (selectedModel) {\n      case 'yolo':\n        endpoint = '/api/detect/yolo';\n        break;\n      case 'detr':\n        endpoint = '/api/detect/detr';\n        break;\n      case 'vit':\n        endpoint = '/api/classify/vit';\n        break;\n      default:\n        setError('Invalid model selection');\n        setIsProcessing(false);\n        return;\n    }\n\n    try {\n      const response = await fetch(endpoint, {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      setResults({ model: selectedModel, data });\n    } catch (err) {\n      console.error('Error processing image:', err);\n      setError(`Error processing image: ${err.message}`);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Box style={{ flexGrow: 1 }}>\n        <AppBar position=\"static\">\n          <Toolbar>\n            <Typography variant=\"h6\" style={{ flexGrow: 1 }}>\n              Vision LLM Multi-Agent System\n            </Typography>\n          </Toolbar>\n          <Tabs \n            value={activeTab} \n            onChange={(e, newValue) => setActiveTab(newValue)} \n            indicatorColor=\"secondary\"\n            textColor=\"inherit\"\n            centered\n          >\n            <Tab label=\"Object Detection\" />\n            <Tab label=\"Product Comparison\" />\n          </Tabs>\n        </AppBar>\n        <Container maxWidth=\"lg\" style={{ marginTop: theme.spacing(4), marginBottom: theme.spacing(4) }}>\n          {activeTab === 0 ? (\n            <Grid container spacing={3}>\n            <Grid item xs={12}>\n              <Paper style={{ padding: theme.spacing(2) }}>\n                <Typography variant=\"h5\" gutterBottom>\n                  Upload an image to see how each model performs!\n                </Typography>\n                <Typography variant=\"body1\" paragraph>\n                  This demo showcases three different object detection and image classification models:\n                </Typography>\n                <Typography variant=\"body1\" component=\"div\">\n                  <ul>\n                    <li><strong>YOLOv8</strong>: Fast and accurate object detection</li>\n                    <li><strong>DETR</strong>: DEtection TRansformer for object detection</li>\n                    <li><strong>ViT</strong>: Vision Transformer for image classification</li>\n                  </ul>\n                </Typography>\n              </Paper>\n            </Grid>\n            \n            <Grid item xs={12} md={6}>\n              <ImageUploader onImageUpload={handleImageUpload} />\n            </Grid>\n            \n            <Grid item xs={12} md={6}>\n              <ModelSelector \n                onModelSelect={handleModelSelect} \n                onProcess={processImage}\n                isProcessing={isProcessing}\n                modelsStatus={modelsStatus}\n                selectedModel={selectedModel}\n                imageSelected={!!selectedImage}\n              />\n            </Grid>\n            \n            {error && (\n              <Grid item xs={12}>\n                <Paper style={{ padding: theme.spacing(2), backgroundColor: '#ffebee' }}>\n                  <Typography color=\"error\">{error}</Typography>\n                </Paper>\n              </Grid>\n            )}\n            \n            {isProcessing && (\n              <Grid item xs={12} style={{ textAlign: 'center', margin: `${theme.spacing(4)}px 0` }}>\n                <CircularProgress />\n                <Typography variant=\"h6\" style={{ marginTop: theme.spacing(2) }}>\n                  Processing image...\n                </Typography>\n              </Grid>\n            )}\n            \n            {results && (\n              <>\n                <Grid item xs={12}>\n                  <ResultDisplay results={results} />\n                </Grid>\n                <Grid item xs={12}>\n                  <LlmAnalysis visionResults={results.data} model={results.model} />\n                </Grid>\n              </>\n            )}\n\n            {/* Vision RAG (LangChain) section at the end */}\n            <Grid item xs={12}>\n              <OpenAIChat imageBase64={imageBase64} />\n            </Grid>\n          </Grid>\n          ) : (\n            <ProductComparison />\n          )}\n        </Container>\n      </Box>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}